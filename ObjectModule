

Функция ОсновнаяРабота(аргСтрукАргументы) Экспорт
	
	ТабЗначРезультат = Новый ТаблицаЗначений;
	
	стрUriКорневогоПакета = "http://web.cbr.ru/";
	
	
	обПроксиЕжедневныеДанные = WSССылки.ЕжденевныеДанныеЦентробанка.СоздатьWSПрокси(стрUriКорневогоПакета, "DailyInfo", "DailyInfoSoap");
	
	
	Если аргСтрукАргументы.перКоманда = 1 Тогда
		
		стрНазваниеМетода = "GetCursOnDate"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода); 	
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);	
		
		обАргументы.On_date = аргСтрукАргументы.стрДатаНачала;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.GetCursOnDate(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить("ValuteData") = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram.ValuteData.ValuteCursOnDate, 
				СоздатьМассивКолонокКурсовВалют());
			КонецЕсли; 
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 2 Тогда
		
		стрНазваниеМетода = "EnumValutes";
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.Seld = аргСтрукАргументы.флПоказыватьЕжемесячныеВалюты;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.EnumValutes(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить("ValuteData") = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram.ValuteData[стрНазваниеМетода], 
				СоздатьМассивКолонокКодовВалют());
			КонецЕсли;	
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 3 Тогда
		
		стрНазваниеМетода = "GetCursDynamic";
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);	
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.FromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		обАргументы.ValutaCode = аргСтрукАргументы.стрКодВалюты;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.GetCursDynamic(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить("ValuteData") = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram.ValuteData.GetCursDynamic, 
				СоздатьМассивКолонокДинамикиВалют());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 4 Тогда
		
		стрНазваниеМетода = "KeyRate";
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;	
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;	
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.KeyRate(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда		
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].KR, 
				СоздатьМассивКолонокДинамикиКлючевойСтавки());
			КонецЕсли;
			
		КонецЕсли;
		
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 5 Тогда
		
		стрНазваниеМетода = "DragMetDynamic";
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;	
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.DragMetDynamic(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить("DragMetall") = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram.DragMetall.DrgMet, 
				СоздатьМассивКолонокДинамикиДрагоценныхМеталов());	
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 6 Тогда 
		
		стрНазваниеМетода = "NewsInfo";
		стрНазваниеРезультата = стрНазваниеМетода + "Result"; 
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.NewsInfo(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].News, 
				СоздатьМассивКолонокНовостей());
			КонецЕсли;
			
		КонецЕсли;
		
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 7 Тогда 
		
		стрНазваниеМетода = "SwapDynamic";
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.SwapDynamic(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить("Swap") = Неопределено Тогда
			ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram.Swap, 
			СоздатьМассивКолонокДинамикиСтавокВлютногоСвопа());
			КонецЕсли;
					
		КонецЕсли;  
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 8 Тогда
		
		стрНазваниеМетода = "DepoDynamic";
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.DepoDynamic(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].Depo, 
				СоздатьМассивКолонокДинамикиСтавокПривлеченияСредств());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 9 Тогда 
		
		стрНазваниеМетода = "OstatDynamic";
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate =  аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.OstatDynamic(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].Ostat, 
				СоздатьМассивКолонокДинамикиОстатковСредств());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 10 Тогда 
		
		стрНазваниеМетода = "OstatDepoNew";
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate =  аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.OstatDepoNew(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить("OD") = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram.OD.odn, 
				СоздатьМассивКолонокДепозитовБанковВРоссии());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 11 Тогда
		
		стрНазваниеМетода = "mrrf"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.mrrf(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить("mr") = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram.mr, 
				СоздатьМассивКолонокРезервовРоссии());
			КонецЕсли;
					
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 12 Тогда
		
		стрНазваниеМетода = "Saldo"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.Saldo(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].So, 
				СоздатьМассивКолонокСальдоОперацииЦентробанка());
			КонецЕсли;
					
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 13 Тогда
		
		стрНазваниеМетода = "RuoniaSV";
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.RuoniaSV(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].ra, 
				СоздатьМассивКолонокИндексRuonia());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 14 Тогда
		
		стрНазваниеМетода = "Ruonia";
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.Ruonia(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].ro, 
				СоздатьМассивКолонокСтавкаRuonia());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 15 Тогда
		
		стрНазваниеМетода = "MKR"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.MKR(обАргументы); 
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить("mkr_base") = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram["mkr_base"].MKR, 
				СоздатьМассивКолонокСтавокКредитногоРынка());
			КонецЕсли;
					
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 16 Тогда
		
		стрНазваниеМетода = "DV"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.DV(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить("DV_base") = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram.DV_base.DV, 
				СоздатьМассивКолонокТребованийЦБ());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 17 Тогда
		
		стрНазваниеМетода = "Repo_debt2"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.Repo_debt2(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].RD, 
				СоздатьМассивКолонокТребованийЦБКРепо());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 18 Тогда
		
		стрНазваниеМетода = "Coins_base"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.Coins_base(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].CB, 
				СоздатьМассивКолонокЦенМонет());
			КонецЕсли;
					
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 19 Тогда
		
		стрНазваниеМетода = "Overnight"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.Overnight(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].OB, 
				СоздатьМассивКолонокОднодневногоКредита());
			КонецЕсли;
					
		КонецЕсли;  
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 20 Тогда
		
		стрНазваниеМетода = "Bauction"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.Bauction(обАргументы); 
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].BA, 
				СоздатьМассивКолонокБюджетаНаДепозитах());
			КонецЕсли;
					
		КонецЕсли;
		
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 21 Тогда
		
		стрНазваниеМетода = "SwapDayTotal"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.SwapDayTotal(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].SDT, 
				СоздатьМассивКолонокЗадолженостиПередЦБ());
			КонецЕсли;
					
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 22 Тогда
		
		стрНазваниеМетода = "SwapMonthTotal"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.SwapMonthTotal(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].SMT, 
				СоздатьМассивКолонокОбъёмаВалютныхСделок());
			КонецЕсли;
					
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 23 Тогда
		
		стрНазваниеМетода = "SwapInfoSell"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.SwapInfoSell(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].SSU, 
				СоздатьМассивКолонокОбъёмаВалютныхСделокЦБ());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 24 Тогда
		
		стрНазваниеМетода = "SwapInfoSellVol"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.SwapInfoSellVol(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].SSUV, 
				СоздатьМассивКолонокПродажиВалют());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 25 Тогда
		
		стрНазваниеМетода = "Bliquidity"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.Bliquidity(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].BL, 
				СоздатьМассивКолонокЛиквидности());
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 26 Тогда
		
		стрНазваниеМетода = "BiCurBase"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.BiCurBase(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].BCB, 
				СоздатьМассивКолонокСтоимостиБивалютнойКорзины());
			КонецЕсли;
			
		КонецЕсли;
		
		
	ИначеЕсли аргСтрукАргументы.перКоманда = 27 Тогда
		
		стрНазваниеМетода = "BiCurBacket"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.BiCurBacket(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].BC, 
				СоздатьМассивКолонокСтруктурыБивалютнойКорзины());
			КонецЕсли;
			
		КонецЕсли; 
		
		
		ИначеЕсли аргСтрукАргументы.перКоманда = 28 Тогда
		
		стрНазваниеМетода = "RepoDebtUSD"; 
		стрНазваниеРезультата = стрНазваниеМетода + "Result";
		
		обТипАргумента = обПроксиЕжедневныеДанные.ФабрикаXDTO.Пакеты.Получить(стрUriКорневогоПакета).Получить(стрНазваниеМетода);
		обАргументы = обПроксиЕжедневныеДанные.ФабрикаXDTO.Создать(обТипАргумента);
		
		обАргументы.fromDate = аргСтрукАргументы.стрДатаНачала;
		обАргументы.ToDate = аргСтрукАргументы.стрДатаКонца;
		
		обРезультатЗапроса = обПроксиЕжедневныеДанные.RepoDebtUSD(обАргументы);
		
		Если Не обРезультатЗапроса[стрНазваниеРезультата].Свойства().Получить("diffgram") = Неопределено Тогда			
			
			Если Не обРезультатЗапроса[стрНазваниеРезультата].diffgram.Свойства().Получить(стрНазваниеМетода) = Неопределено Тогда
				ТабЗначРезультат = ЗаписатьСписокXdtoВТаблицу(обРезультатЗапроса[стрНазваниеРезультата].diffgram[стрНазваниеМетода].rd, 
				СоздатьМассивКолонокЗадолженостьПередЦБПоРепо());
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	
		
	
	
	
	Возврат ТабЗначРезультат;
	                     
КонецФункции





Функция СоздатьМассивКолонокКурсовВалют()
	
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("Vname");
	масРезультат.Добавить("Vnom");
	масРезультат.Добавить("Vcurs");
	масРезультат.Добавить("Vcode");
	масРезультат.Добавить("VchCode");
	масРезультат.Добавить("VunitRate");
	
	Возврат масРезультат;
	
КонецФункции

Функция СоздатьМассивКолонокКодовВалют()
	
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("Vcode");
	масРезультат.Добавить("Vname");
	масРезультат.Добавить("VEngname");
	масРезультат.Добавить("Vnom");
	масРезультат.Добавить("VchCode");
	масРезультат.Добавить("VcommonCode");
	масРезультат.Добавить("VnumCode");
	масРезультат.Добавить("VcharCode");
	
	Возврат масРезультат;

КонецФункции

Функция СоздатьМассивКолонокДинамикиВалют()
	
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("CursDate");
	масРезультат.Добавить("Vcode");
	масРезультат.Добавить("Vnom");
	масРезультат.Добавить("Vcurs");
	масРезультат.Добавить("VunitRate");
	
	Возврат масРезультат;
		
КонецФункции

Функция СоздатьМассивКолонокДинамикиКлючевойСтавки()
	
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DT");
	масРезультат.Добавить("Rate");
	масРезультат.Добавить("id");
	масРезультат.Добавить("rowOrder");
		
	Возврат масРезультат;
		
КонецФункции

Функция СоздатьМассивКолонокДинамикиДрагоценныхМеталов()

	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DateMet");
	масРезультат.Добавить("CodMet");
	масРезультат.Добавить("price");
		
	Возврат масРезультат;
		
КонецФункции	

Функция СоздатьМассивКолонокНовостей()

	масРезультат = Новый Массив;
	
	масРезультат.Добавить("Doc_id");
	масРезультат.Добавить("DocDate");
	масРезультат.Добавить("Title");
	масРезультат.Добавить("Url");
		
	Возврат масРезультат;	
	
КонецФункции

Функция СоздатьМассивКолонокДинамикиСтавокВлютногоСвопа()
	
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DateBuy");
	масРезультат.Добавить("DateSell");
	масРезультат.Добавить("BaseRate");
	масРезультат.Добавить("SD");
	масРезультат.Добавить("TIR");
	масРезультат.Добавить("DEADLINEBS");	
	
	Возврат масРезультат;	
	
КонецФункции

Функция СоздатьМассивКолонокДинамикиСтавокПривлеченияСредств()
	
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DateDepo");
	масРезультат.Добавить("Overnight");
	масРезультат.Добавить("Tomnext");
	масРезультат.Добавить("P1week");
	масРезультат.Добавить("P2weeks");
	масРезультат.Добавить("P1month");
	масРезультат.Добавить("P3month");
	масРезультат.Добавить("SpotNext");
	масРезультат.Добавить("SpotWeek");
	масРезультат.Добавить("Spot2Weeks");
	масРезультат.Добавить("CallDeposit");
	
	Возврат масРезультат;		
	
КонецФункции

Функция СоздатьМассивКолонокДинамикиОстатковСредств()
		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DateOst");
	масРезультат.Добавить("InRuss");
	масРезультат.Добавить("InMoscow");
	
	Возврат масРезультат;			
	
КонецФункции

Функция СоздатьМассивКолонокДепозитовБанковВРоссии()
 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DT");
	масРезультат.Добавить("AUC_1W");
	масРезультат.Добавить("AUC_THIN");
	масРезультат.Добавить("OV_P");
	масРезультат.Добавить("TOTAL");
	
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокРезервовРоссии()
	 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("D0");
	масРезультат.Добавить("p1");
	масРезультат.Добавить("p2");
	масРезультат.Добавить("p3");
	масРезультат.Добавить("p4");
	масРезультат.Добавить("p5");
	масРезультат.Добавить("p6");
	
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокСальдоОперацииЦентробанка()
	 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DEADLINEBS");
	масРезультат.Добавить("Dt");
	масРезультат.Добавить("id");
	масРезультат.Добавить("rowOrder");

	
	Возврат масРезультат;			
		
КонецФункции	
	
Функция СоздатьМассивКолонокИндексRuonia()
	 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DT");
	масРезультат.Добавить("RUONIA_Index");
	масРезультат.Добавить("RUONIA_AVG_1M");
	масРезультат.Добавить("RUONIA_AVG_3M");
    масРезультат.Добавить("RUONIA_AVG_6M");
	масРезультат.Добавить("id");
	масРезультат.Добавить("rowOrder");
	
	
	Возврат масРезультат;			
		
КонецФункции	

Функция СоздатьМассивКолонокСтавкаRuonia()
		 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("D0");
	масРезультат.Добавить("ruo");
	масРезультат.Добавить("vol");
	масРезультат.Добавить("DateUpdate");
	масРезультат.Добавить("id");
	масРезультат.Добавить("rowOrder");
	
	
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокСтавокКредитногоРынка()
 		 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("CDate");
	масРезультат.Добавить("p1");
	масРезультат.Добавить("d1");
	масРезультат.Добавить("d7");
	масРезультат.Добавить("d30");
	масРезультат.Добавить("d90");
	масРезультат.Добавить("d90");
	масРезультат.Добавить("d180");
	масРезультат.Добавить("d360");
	
	
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокТребованийЦБ()
	 		 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("Date");
	масРезультат.Добавить("VOvern");
	масРезультат.Добавить("VLomb");
	масРезультат.Добавить("VIDay");
	масРезультат.Добавить("VOther");
	масРезультат.Добавить("Vol_Gold");
	масРезультат.Добавить("VIDate");
	масРезультат.Добавить("Vol_PM");
	масРезультат.Добавить("Vol_SM");
	масРезультат.Добавить("id");
	масРезультат.Добавить("rowOrder");
	
	
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокТребованийЦБКРепо()
		 		 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("Date");
	масРезультат.Добавить("DebtTotal");
	масРезультат.Добавить("DebtTH");
	масРезультат.Добавить("DebtOCH");
	масРезультат.Добавить("Debt1M");
	масРезультат.Добавить("Debt1Y");
	масРезультат.Добавить("DebtOM");
	масРезультат.Добавить("DebtDM");
	масРезультат.Добавить("RefTotal");
	масРезультат.Добавить("RefTH");
	масРезультат.Добавить("RefOCH");
	масРезультат.Добавить("Ref1M");
	масРезультат.Добавить("Ref1Y");
	масРезультат.Добавить("RefOM");
	масРезультат.Добавить("RefDM");
	
	
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокЦенМонет()
		 		 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("date");
	масРезультат.Добавить("Cat_number");
	масРезультат.Добавить("name");
	масРезультат.Добавить("nominal");
	масРезультат.Добавить("Metall");
	масРезультат.Добавить("Q");
	масРезультат.Добавить("PriceBR");
			
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокОднодневногоКредита()
		 		 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("date");
	масРезультат.Добавить("stavka");
			
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокБюджетаНаДепозитах()
		 		 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("date");
	масРезультат.Добавить("Srok");
	масРезультат.Добавить("stav_w");
	масРезультат.Добавить("vol_sr");
			
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокЗадолженостиПередЦБ()
		 		 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DT");
	масРезультат.Добавить("Swap");
			
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокОбъёмаВалютныхСделок()
 		 		 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("D0");
	масРезультат.Добавить("RUB");
	масРезультат.Добавить("USD");
	масРезультат.Добавить("EUR");
			
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокОбъёмаВалютныхСделокЦБ()
	 		 		 		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("Currency");
	масРезультат.Добавить("DateBuy");
	масРезультат.Добавить("DateSell");
	масРезультат.Добавить("DateSPOT");
	масРезультат.Добавить("Type");
	масРезультат.Добавить("BaseRate");
	масРезультат.Добавить("SD");
	масРезультат.Добавить("TIR");
	масРезультат.Добавить("Stavka");
	масРезультат.Добавить("limit");
			
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокПродажиВалют()
	
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DT");
	масРезультат.Добавить("Currency");
	масРезультат.Добавить("type");
	масРезультат.Добавить("VOL_FC");
	масРезультат.Добавить("VOL_RUB");
			
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокЛиквидности()
		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("DT");
	масРезультат.Добавить("StrLiDef");
	масРезультат.Добавить("actionBasedRepoFX");
	масРезультат.Добавить("actionBasedSecureLoans");
	масРезультат.Добавить("standingFacilitiesRepoFX");    
	масРезультат.Добавить("standingFacilitiesSecureLoans");
	масРезультат.Добавить("liabilities");
	масРезультат.Добавить("depositAuctionBased");
	масРезультат.Добавить("depositStandingFacilities");
	масРезультат.Добавить("CBRbonds");
	масРезультат.Добавить("netCBRclaims");
	масРезультат.Добавить("StrLiDefNew");
	масРезультат.Добавить("CorrAcc");
			
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокСтоимостиБивалютнойКорзины()
			
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("D0");
	масРезультат.Добавить("VAL");
			
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокСтруктурыБивалютнойКорзины()
  		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("D0");
	масРезультат.Добавить("USD");
	масРезультат.Добавить("EUR");
			
	Возврат масРезультат;			
		
КонецФункции

Функция СоздатьМассивКолонокЗадолженостьПередЦБПоРепо()
    		
	масРезультат = Новый Массив;
	
	масРезультат.Добавить("D0");
	масРезультат.Добавить("TP");
	масРезультат.Добавить("debt1w");
	масРезультат.Добавить("debt28d");
	масРезультат.Добавить("debt12m");
	масРезультат.Добавить("debtSum");
			
	Возврат масРезультат;			
		
КонецФункции



Функция СоздатьXmlИзXdto(аргXdtoОбъект)
	
	обЗапись = Новый ЗаписьXML;
	обЗапись.УстановитьСтроку();	
	ФабрикаXDTO.ЗаписатьXML(обЗапись, аргXdtoОбъект);
	
	Возврат обЗапись.Закрыть();	
	
КонецФункции



Функция ЗаписатьСписокXdtoВТаблицу(аргXdtoОбъект, аргМасКолонок)
	
	ТабЗначРезультат = Новый ТаблицаЗначений; 
	
	Для Каждого элНазвание Из аргМасКолонок Цикл		
		ТабЗначРезультат.Колонки.Добавить(элНазвание)		
	КонецЦикла;
	
	
	Если Типзнч(аргXdtoОбъект) = Тип("СписокXDTO") Тогда
		
		Для Каждого элемент Из аргXdtoОбъект Цикл
			ЗаполнитьЗначенияСвойств(ТабЗначРезультат.Добавить(), элемент);
		КонецЦикла;
		
	Иначе		
		ЗаполнитьЗначенияСвойств(ТабЗначРезультат.Добавить(), аргXdtoОбъект);		
	КонецЕсли;

	
	Возврат ТабЗначРезультат;
	
КонецФункции



Функция СоздатьXdtoИзXml(аргСтрXml, аргОбТип = Неопределено)

	обЧитатель = Новый ЧтениеXML;
	обЧитатель.УстановитьСтроку(аргСтрXml);
	
	Если Не аргОбТип = Неопределено Тогда
		Возврат ФабрикаXDTO.ПрочитатьXML(обЧитатель, аргОбТип);  
	КонецЕсли; 
	
	Возврат ФабрикаXDTO.ПрочитатьXML(обЧитатель);
		
КонецФункции

	
